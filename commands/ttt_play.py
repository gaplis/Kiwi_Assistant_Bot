from random import choice

from telebot.async_telebot import AsyncTeleBot

from utils.states import TTTGameState
from utils.db import DataBase
from utils.markups import main_menu_markup, ttt_play_markup
from utils.ttt_engine import rand_choice_bot_in_ttt_game, check_win


async def ttt_game(message, bot):
    ttt_game_text = f'<b>–ü–†–ê–í–ò–õ–ê –ò–ì–†–´ "–ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò"</b>\n\n' \
                    f'–ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–≤—è—Ç –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è 3√ó3 –∑–Ω–∞–∫–∏ ' \
                    f'(–æ–¥–∏–Ω –≤—Å–µ–≥–¥–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏, –¥—Ä—É–≥–æ–π –≤—Å–µ–≥–¥–∞ –Ω–æ–ª–∏–∫–∏)\n' \
                    f'–ü–µ—Ä–≤—ã–π, –≤—ã—Å—Ç—Ä–æ–∏–≤—à–∏–π –≤ —Ä—è–¥ 3 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, ' \
                    f'–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –±–æ–ª—å—à–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç\n' \
                    f'–ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ 9 —è—á–µ–µ–∫ –∏ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ ' \
                    f'–±–æ–ª—å—à–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–µ—Ç —Ç—Ä—ë—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–≤, –ø–∞—Ä—Ç–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è –≤ –Ω–∏—á—å—é\n' \
                    f'–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫, —Å—Ç–∞–≤—è—â–∏–π –∫—Ä–µ—Å—Ç–∏–∫–∏\n'

    await bot.set_state(message.from_user.id, TTTGameState.game, message.chat.id)
    await bot.send_message(message.chat.id, ttt_game_text)

    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['field'] = [[None for _ in range(3)] for _ in range(3)]
        data['players'] = {'player': None, 'cpu': None}
        data['first_step'] = choice(['player', 'cpu'])
        data['now_step'] = data['first_step']

        bot_step = None
        if data['first_step'] == 'player':
            data['players']['player'] = '‚ùå'
            data['players']['cpu'] = 'üü¢'
            start_game_text = f'–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—à—å —Ç—ã, –Ω–∞—á–∞–ª–∏!'

            step_text = f''
            for i in data['field']:
                for j in i:
                    step_text += f'{j if j is not None else "‚¨õÔ∏è"}'
                step_text += '\n'

        else:
            data['players']['cpu'] = '‚ùå'
            data['players']['player'] = 'üü¢'
            data['field'] = rand_choice_bot_in_ttt_game(data['field'], data['players']['cpu'])

            start_game_text = f'–ü–µ—Ä–≤–æ–π —Ö–æ–∂—É —è, –Ω–∞—á–∞–ª–∏!'

            step_text = f''
            for i in data['field']:
                for j in i:
                    step_text += f'{j if j is not None else "‚¨õÔ∏è"}'
                step_text += '\n'

            data['now_step'] = 'player'
            bot_step = f'–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥'

        await bot.send_message(message.chat.id, start_game_text)
        await bot.send_message(message.chat.id, step_text, reply_markup=ttt_play_markup(data['field']))
        if bot_step is not None:
            await bot.send_message(message.chat.id, bot_step, reply_markup=ttt_play_markup(data['field']))


async def cancel_ttt_game(message, bot):
    db = DataBase()
    with db as cursor:
        db.find_user(message.from_user.id, db.U_ID)
        user_id = cursor.fetchone()[0]
        db.find_statistics(user_id, db.LEAVES['TTT'])
        leaves = cursor.fetchone()[0]
        db.update_statistics(user_id, db.LEAVES['TTT'], leaves + 1)

    cancel_text = "–ê —Ç—ã –≤–µ–¥—å –º–æ–≥ –≤—ã–∏–≥—Ä–∞—Ç—å..."

    await bot.send_message(message.chat.id, cancel_text, reply_markup=main_menu_markup())
    await bot.delete_state(message.from_user.id, message.chat.id)


async def play_ttt_game(message, bot):
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        buttons = {
            '‚ÜñÔ∏è': {'res': data['field'][0][0], 'i': 0, 'j': 0},
            '‚¨ÜÔ∏è': {'res': data['field'][0][1], 'i': 0, 'j': 1},
            '‚ÜóÔ∏è': {'res': data['field'][0][2], 'i': 0, 'j': 2},
            '‚¨ÖÔ∏è': {'res': data['field'][1][0], 'i': 1, 'j': 0},
            '‚è∫': {'res': data['field'][1][1], 'i': 1, 'j': 1},
            '‚û°Ô∏è': {'res': data['field'][1][2], 'i': 1, 'j': 2},
            '‚ÜôÔ∏è': {'res': data['field'][2][0], 'i': 2, 'j': 0},
            '‚¨áÔ∏è': {'res': data['field'][2][1], 'i': 2, 'j': 1},
            '‚ÜòÔ∏è': {'res': data['field'][2][2], 'i': 2, 'j': 2},
        }

        if message.text in 'Ô∏è‚ùåüü¢':
            busy_place_text = f'–≠—Ç–æ –ø–æ–ª–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ'

            return await bot.send_message(message.chat.id, busy_place_text,
                                          reply_markup=ttt_play_markup(data['field']))

        if message.text not in buttons:
            missing_button_text = f'–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n' \
                                  f'–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å–Ω–∏–∑—É'

            return await bot.send_message(message.chat.id, missing_button_text,
                                          reply_markup=ttt_play_markup(data['field']))

        i = buttons[message.text]['i']
        j = buttons[message.text]['j']
        data['field'][i][j] = data['players']['player']

        step_text = f''
        for i in data['field']:
            for j in i:
                step_text += f'{j if j is not None else "‚¨õÔ∏è"}'
            step_text += '\n'

        win_player = check_win(data['field'], data['players']['player'], data['now_step'])
        if win_player is None:
            await bot.send_message(message.chat.id, step_text)
            data['now_step'] = 'cpu'
        elif win_player is data['now_step']:
            db = DataBase()
            with db as cursor:
                db.find_user(message.from_user.id, db.U_ID)
                user_id = cursor.fetchone()[0]
                db.find_statistics(user_id, db.WINS['TTT'])
                wins = cursor.fetchone()[0]
                db.update_statistics(user_id, db.WINS['TTT'], wins + 1)

            win_player_text = f'–¢—ã –≤—ã–∏–≥—Ä–∞–ª, –ø–æ–∑–¥—Ä–æ–≤–ª—è—é!'

            await bot.send_message(message.chat.id, step_text)
            await bot.send_message(message.chat.id, win_player_text, reply_markup=main_menu_markup())
            return await bot.delete_state(message.from_user.id, message.chat.id)
        else:
            db = DataBase()
            with db as cursor:
                db.find_user(message.from_user.id, db.U_ID)
                user_id = cursor.fetchone()[0]
                db.find_statistics(user_id, db.DRAWS['TTT'])
                draws = cursor.fetchone()[0]
                db.update_statistics(user_id, db.DRAWS['TTT'], draws + 1)

            draw_text = f'–ü–æ—Ö–æ–∂–µ, —É –Ω–∞—Å –Ω–∏—á—å—è üòÑ'

            await bot.send_message(message.chat.id, step_text)
            await bot.send_message(message.chat.id, draw_text, reply_markup=main_menu_markup())
            return await bot.delete_state(message.from_user.id, message.chat.id)

        bot_walks_text = f'–¢–µ–ø–µ—Ä—å –º–æ–π —Ö–æ–¥'

        await bot.send_message(message.chat.id, bot_walks_text)
        data['field'] = rand_choice_bot_in_ttt_game(data['field'], data['players']['cpu'])

        step_text = f''
        for i in data['field']:
            for j in i:
                step_text += f'{j if j is not None else "‚¨õÔ∏è"}'
            step_text += '\n'

        win_cpu = check_win(data['field'], data['players']['cpu'], data['now_step'])
        if win_cpu is None:
            await bot.send_message(message.chat.id, step_text)
            data['now_step'] = 'player'
        elif win_cpu is data['now_step']:
            db = DataBase()
            with db as cursor:
                db.find_user(message.from_user.id, db.U_ID)
                user_id = cursor.fetchone()[0]
                db.find_statistics(user_id, db.LOSES['TTT'])
                loses = cursor.fetchone()[0]
                db.update_statistics(user_id, db.LOSES['TTT'], loses + 1)

            win_player_text = f'–Ø –≤—ã–∏–≥—Ä–∞–ª! ‚ò∫Ô∏è'

            await bot.send_message(message.chat.id, step_text)
            await bot.send_message(message.chat.id, win_player_text, reply_markup=main_menu_markup())
            return await bot.delete_state(message.from_user.id, message.chat.id)
        else:
            db = DataBase()
            with db as cursor:
                db.find_user(message.from_user.id, db.U_ID)
                user_id = cursor.fetchone()[0]
                db.find_statistics(user_id, db.DRAWS['TTT'])
                draws = cursor.fetchone()[0]
                db.update_statistics(user_id, db.DRAWS['TTT'], draws + 1)

            draw_text = f'–ü–æ—Ö–æ–∂–µ, —É –Ω–∞—Å –Ω–∏—á—å—è üòÑ'

            await bot.send_message(message.chat.id, step_text)
            await bot.send_message(message.chat.id, draw_text, reply_markup=main_menu_markup())
            return await bot.delete_state(message.from_user.id, message.chat.id)

        player_walks_text = f'–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥'
        await bot.send_message(message.chat.id, player_walks_text, reply_markup=ttt_play_markup(data['field']))


def route(bot: AsyncTeleBot):
    bot.register_message_handler(ttt_game, ttt_game_commands=True, pass_bot=True)
    bot.register_message_handler(cancel_ttt_game, state=TTTGameState.game, give_up_commands=True, pass_bot=True)
    bot.register_message_handler(play_ttt_game, state=TTTGameState.game, pass_bot=True)
